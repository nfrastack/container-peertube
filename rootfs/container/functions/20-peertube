# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

peertube_bootstrap_filesystem() {
    create_folder \
                    "${CONFIG_PATH},\
                    ${DATA_PATH},
                    ${LOG_PATH}" \
                    peertube:peertube 755

    create_logrotate peertube "${LOG_PATH}"/peertube.log peertube peertube
    create_logrotate peertube-audit "${LOG_PATH}"/peertube-audit.log peertube peertube
}

peertube_configure_nginx() {
    if var_false "${ENABLE_NGINX}" ; then
        print_debug "[peertube_configure_nginx] Skipping nginx setup"
    else
        source /container/{defaults,functions}/10-nginx
        _web_videos_tmp=$(basename "${STORAGE_WEB_VIDEOS_PATH}")

        update_template \
                        /etc/nginx/sites.available/peertube.conf \
                            DATA_PATH \
                            LISTEN_PORT \
                            NGINX_LISTEN_PORT \
                            STORAGE_CLIENT_OVERRIDES_PATH \
                            _web_videos_tmp
        nginx_site_enable peertube
    fi
}

peertube_generate_configuration() {
    if [ ! -f "${CONFIG_PATH}"/"${CONFIG_FILE}" ] ; then
        s6-setuidgid peertube cp /container/data/peertube/config/production.yaml.example "${CONFIG_PATH}"/"${CONFIG_FILE}"
        s6-setuidgid peertube cp /container/data/peertube/config/custom-environment-variables.yaml "${CONFIG_PATH}"/
    fi

    transform_var file \
                        PEERTUBE_SECRET

    if [ -z "${PEERTUBE_SECRET}" ]; then
        if [ ! -f "${CONFIG_PATH}/.peertube.secret" ]; then
            openssl rand -hex 32 > "${CONFIG_PATH}"/.peertube.secret
            print_info "Automatically generated PEERTUBE_SECRET - turn it into an environment variable with contents of '${CONFIG_PATH}/.peertube.secret'"
        fi
        export PEERTUBE_SECRET=$(cat "${CONFIG_PATH}"/.peertube.secret)
    fi

    s6-setuidgid peertube yq -i '
                                    .secrets.peertube = env(PEERTUBE_SECRET)
                                ' "${CONFIG_PATH}"/"${CONFIG_FILE}"

    transform_var file \
                        DB_HOST \
                        DB_PORT \
                        DB_USER \
                        DB_PASS \
                        DB_SUFFIX \
                        DB_NAME

    sanity_var DB_USER "DB Username"
    sanity_var DB_PASS "DB Password"
    sanity_var DB_HOST "DB Host"
    sanity_var DB_NAME "DB Name"
    db_ready postgres
}
